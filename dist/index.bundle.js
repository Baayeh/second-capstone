"use strict";(self.webpackChunkwebpack_template=self.webpackChunkwebpack_template||[]).push([[826],{63:()=>{const n=class{static getCountries=async()=>(await fetch("https://restcountries.com/v3.1/all")).json()},s=document.querySelector(".country-list");document.addEventListener("DOMContentLoaded",(async()=>{const t=(await n.getCountries()).slice(0,6);s.innerHTML=t.map((n=>`<li class="country-item">\n    <div class="card">\n      <div class="country-img">\n        <img src="${n.flags.svg}" alt="Ugandan Flag">\n      </div>\n      <div class="card-body">\n        <p class="country-name mb-0">${n.name.common}</p>\n        <div class="likes">\n          <a href="" type="button">\n            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>\n          </a>\n          <span class="likes-counter">5 likes</span>\n        </div>\n      </div>\n      <div class="actions">\n        <button type="button">Comments</button>\n      </div>\n    </div>\n  </li>`)).join("")})())}},n=>{n(n.s=63)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI0R0FTQSxRQVBBLE1BQ0VBLG9CQUFzQkMsZ0JBQ0dDLE1BQU0sdUNBQ2JDLFFDSHBCLEVBRm9CQyxTQUFTQyxjQUFjLGlCQzBGM0NELFNBQVNFLGlCQUFpQixtQkE1QkRMLFdBQ3ZCLE1BQ01NLFNBRGtCLGtCQUNPQyxNQUFNLEVBQUcsR0FDeEMsWUFBd0JELEVBQ3JCRSxLQUNFQyxHQUFZLHlHQUdDQSxFQUFRQyxNQUFNQywrR0FHS0YsRUFBUUcsS0FBS0MscW5CQWMvQ0MsS0FBSyxHQUFHLEVBR2lDQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9tb2R1bGVzL0FQSS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL21vZHVsZXMvRE9NRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCQVNFX1VSTCA9ICdodHRwczovL3Jlc3Rjb3VudHJpZXMuY29tL3YzLjEnO1xyXG5cclxuY2xhc3MgQVBJIHtcclxuICBzdGF0aWMgZ2V0Q291bnRyaWVzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYWxsYCk7XHJcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFQSTtcclxuIiwiY29uc3QgY291bnRyeUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY291bnRyeS1saXN0Jyk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb3VudHJ5TGlzdDtcclxuIiwiaW1wb3J0IEFQSSBmcm9tICcuL21vZHVsZXMvQVBJLmpzJztcclxuaW1wb3J0IGNvdW50cnlMaXN0IGZyb20gJy4vbW9kdWxlcy9ET01FbGVtZW50cy5qcyc7XHJcblxyXG4vLyBpbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuLy8gaW1wb3J0IHtcclxuLy8gICBkaXNwbGF5Q291bnRyaWVzLFxyXG4vLyAgIHNob3dDb21tZW50cyxcclxuLy8gICBzaG93RGV0YWlscyxcclxuLy8gfSBmcm9tICcuL21vZHVsZXMvc2hvd3MuanMnO1xyXG5cclxuLy8gZGlzcGxheVNob3dzKCk7XHJcblxyXG4vLyBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpdGVtLW1vZGFsJyk7XHJcblxyXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuLy8gICBjb25zdCBidG5zID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hZGQtY29tbWVudCcpXTtcclxuLy8gICBidG5zLmZvckVhY2goKG1vZGFsQnRuKSA9PiB7XHJcbi8vICAgICBtb2RhbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChldmVudCkgPT4ge1xyXG4vLyAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmlkICE9PSBudWxsKSB7XHJcbi8vICAgICAgICAgLy8gc2hvdyBtb2RhbFxyXG4vLyAgICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuLy8gICAgICAgICAvLyBjb3VudHJ5IHNob3dzXHJcbi8vICAgICAgICAgY29uc3QgZGlzcGxheUNvdW50cmllcyA9IGF3YWl0IHNob3dEZXRhaWxzKGV2ZW50LnRhcmdldC5pZCk7XHJcbi8vICAgICAgICAgY29uc3QgZ2VucmVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dlbnJlcycpO1xyXG4vLyAgICAgICAgIGdlbnJlcy5pbm5lckhUTUwgPSAnJztcclxuLy8gICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRyeS10aXRsZScpLnRleHRDb250ZW50ID0gZGlzcGxheUNvdW50cmllcy5uYW1lO1xyXG4vLyAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudHJ5LWltZycpLnNldEF0dHJpYnV0ZSgnc3JjJywgZGlzcGxheUNvdW50cmllcy5pbWFnZS5tZWRpdW0pO1xyXG4vLyAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdW1tYXJ5JykuaW5uZXJIVE1MID0gYCR7ZGlzcGxheUNvdW50cmllcy5zdW1tYXJ5fWA7XHJcbi8vICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2hvd0NvbW1lbnRzKGV2ZW50LnRhcmdldC5pZCk7XHJcbi8vICAgICAgICAgY29uc3QgY29tbWVudExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29tbWVudC1saXN0Jyk7XHJcbi8vICAgICAgICAgbGV0IHBFbGVtZW50ID0gJyc7XHJcbi8vICAgICAgICAgZGlzcGxheUNvdW50cmllcy5nZW5yZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4vLyAgICAgICAgICAgcEVsZW1lbnQgKz0gYDxwPiR7aXRlbX08L3A+YDtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgICAgICBnZW5yZXMuaW5uZXJIVE1MID0gcEVsZW1lbnQ7XHJcblxyXG4vLyAgICAgICAgIGNvbW1lbnRMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4vLyAgICAgICAgIGxldCBsaUVsZW1lbnQgPSAnJztcclxuLy8gICAgICAgICByZXMuZm9yRWFjaCgocmVzdWx0KSA9PiB7XHJcbi8vICAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XHJcbi8vICAgICAgICAgICAgIGxpRWxlbWVudCArPSAnIDxsaT5ObyBjb21tZW50cyBmb3Igbm93PC9saT4nO1xyXG4vLyAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgbGlFbGVtZW50ICs9IGAgPGxpPiR7cmVzdWx0LmNyZWF0aW9uX2RhdGV9ICR7cmVzdWx0LnVzZXJuYW1lfSAke3Jlc3VsdC5jb21tZW50fTwvbGk+YDtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgICAgICBjb21tZW50TGlzdC5pbm5lckhUTUwgPSBsaUVsZW1lbnQ7XHJcbi8vICAgICAgIH1cclxuLy8gICAgIH0pO1xyXG4vLyAgIH0pO1xyXG4vLyB9KTtcclxuXHJcbi8vIHdpbmRvdy5vbmNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbi8vICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbW9kYWwpIHtcclxuLy8gICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbi8vICAgfVxyXG4vLyB9O1xyXG5cclxuLy8gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2xvc2UnKVswXS5vbmNsaWNrID0gKCkgPT4ge1xyXG4vLyAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbi8vIH07XHJcblxyXG4vLyBEaXNwbGF5IHRoZSBsaXN0IG9mIGNvdW50cmllc1xyXG5jb25zdCBkaXNwbGF5Q291bnRyaWVzID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGNvdW50cmllcyA9IGF3YWl0IEFQSS5nZXRDb3VudHJpZXMoKTtcclxuICBjb25zdCBzaXhDb3VudHJpZXMgPSBjb3VudHJpZXMuc2xpY2UoMCwgNik7XHJcbiAgY291bnRyeUxpc3QuaW5uZXJIVE1MID0gc2l4Q291bnRyaWVzXHJcbiAgICAubWFwKFxyXG4gICAgICAoY291bnRyeSkgPT4gYDxsaSBjbGFzcz1cImNvdW50cnktaXRlbVwiPlxyXG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNvdW50cnktaW1nXCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCIke2NvdW50cnkuZmxhZ3Muc3ZnfVwiIGFsdD1cIlVnYW5kYW4gRmxhZ1wiPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxyXG4gICAgICAgIDxwIGNsYXNzPVwiY291bnRyeS1uYW1lIG1iLTBcIj4ke2NvdW50cnkubmFtZS5jb21tb259PC9wPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsaWtlc1wiPlxyXG4gICAgICAgICAgPGEgaHJlZj1cIlwiIHR5cGU9XCJidXR0b25cIj5cclxuICAgICAgICAgICAgPHN2ZyBjbGFzcz1cInctNiBoLTZcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNC4zMTggNi4zMThhNC41IDQuNSAwIDAwMCA2LjM2NEwxMiAyMC4zNjRsNy42ODItNy42ODJhNC41IDQuNSAwIDAwLTYuMzY0LTYuMzY0TDEyIDcuNjM2bC0xLjMxOC0xLjMxOGE0LjUgNC41IDAgMDAtNi4zNjQgMHpcIj48L3BhdGg+PC9zdmc+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpa2VzLWNvdW50ZXJcIj41IGxpa2VzPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIj5Db21tZW50czwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIDwvbGk+YCxcclxuICAgIClcclxuICAgIC5qb2luKCcnKTtcclxufTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBkaXNwbGF5Q291bnRyaWVzKCkpO1xyXG4iXSwibmFtZXMiOlsic3RhdGljIiwiYXN5bmMiLCJmZXRjaCIsImpzb24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwic2l4Q291bnRyaWVzIiwic2xpY2UiLCJtYXAiLCJjb3VudHJ5IiwiZmxhZ3MiLCJzdmciLCJuYW1lIiwiY29tbW9uIiwiam9pbiIsImRpc3BsYXlDb3VudHJpZXMiXSwic291cmNlUm9vdCI6IiJ9