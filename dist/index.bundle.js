"use strict";(self.webpackChunkwebpack_template=self.webpackChunkwebpack_template||[]).push([[826],{325:()=>{const t=document.querySelector(".country-list"),e="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/";let n=[];const o=document.querySelector("#item-modal");document.getElementsByClassName("close")[0].onclick=()=>{o.style.display="none"};const s=async t=>{const n=document.querySelector(".comment-list");t&&await(async t=>{const n=`${e}apps/IgY08bvfNLdtRYcSagqI/comments?item_id=${t}`;return(await fetch(n,{method:"GET"})).json()})(t).then((t=>{if(!(t.length>0))throw Error("No comments");{const e=t.map((t=>`<li>\n            <span>${t.creation_date}</span>\n            <span>${t.username}</span>\n            <span>${t.comment}</span>\n            </li>`));n.innerHTML=e.join("")}})).catch((t=>{n.innerHTML=t.message}))},c=(e,n=[])=>{if(e.length){const o=e.map((t=>{const e=n.find((e=>{if(e.item_id===t.name.common)return e}));return{...t,likesCount:e?e.likes:0}}));o.length&&(async e=>{t.innerHTML=e.map((t=>`<li class="country-item" id=${t.name.common}>\n    <div class="card">\n      <div class="country-img">\n        <img src="${t.flags.svg}" alt='${t.name.common} flag'>\n      </div>\n      <div class="card-body">\n        <p class="country-name mb-0">${t.name.common}</p>\n        <div class="likes">\n          <a href="javascript:;" type="button" class='add-like' id=${t.name.common}>\n            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>\n          </a>\n          <span class="likes-counter">${t.likesCount}</span>\n        </div>\n      </div>\n      <div class="actions">\n        <button type="button" class="comment-btn" id="${t.name.common}\n">Comments</button>\n      </div>\n    </div>\n  </li>`)).join(""),document.querySelectorAll(".country-item").forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("comment-btn")){const n=t.target.getAttribute("id"),o=document.querySelector("#item-modal");o.setAttribute("data-id",n);const c=((t,e)=>e.find((e=>e.name.common===t.trim())))(n,e);o.style.display="block";const a=document.querySelector("#country-img"),i=document.querySelector("#country-title"),m=document.querySelector("#population"),l=document.querySelector("#sub-region");a.setAttribute("src",c.flags.svg),i.innerHTML=c.name.common,m.innerHTML=`Population: ${c.population}`,l.innerHTML=c.subregion,s(c.name.common)}}))}))})(o)}};document.querySelector("#add-comment").addEventListener("click",(()=>{const t=document.getElementById("item-modal").getAttribute("data-id").trim();let n=document.getElementById("name").value,o=document.getElementById("insights").value;""!==n&&""!==o&&(async t=>(await fetch(`${e}apps/IgY08bvfNLdtRYcSagqI/comments`,{method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify(t)})).text())({item_id:t,username:n,comment:o}).then((e=>{s(t),document.getElementById("name").value="",document.getElementById("insights").value=""}))})),document.addEventListener("DOMContentLoaded",(async()=>{await(async()=>(await fetch("https://restcountries.com/v3.1/all")).json())().then((t=>(n=t.slice(0,6),(async()=>await fetch("https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/Xwzhy7hICqJVdnAtJGEs/likes"))()))).then((t=>{c(n,t)})).catch((()=>{c(n,[])}))}))}},t=>{t(t.s=325)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxNQU1qQyxLQUFiNUMsR0FBK0IsS0FBWkYsR0QxSFBkLE9BQU9TLFVBQ0NMLE1BQU0sR0FBRyxzQ0FBOEMsQ0FDMUVDLE9BQVEsT0FDUndELFFBQVMsQ0FBRSxlQUFnQixvQkFDM0JDLEtBQU1DLEtBQUtDLFVBQVV2RCxNQUVUd0QsT0NxSGhCQyxDQU5rQixDQUNsQnBDLFFBQVM0QixFQUNUMUMsV0FDQUYsWUFHdUJOLE1BQUsyRCxJQUMxQnBFLEVBQWUyRCxHQUNmbEUsU0FBU21FLGVBQWUsUUFBUUMsTUFBUSxHQUN4Q3BFLFNBQVNtRSxlQUFlLFlBQVlDLE1BQVEsRUFBRSxHQUVqRCxJQW9CSHBFLFNBQVMrQyxpQkFBaUIsb0JBZEF2QyxlSDNJTEEsaUJBQ0lJLE1BQU0sdUNBQ2JFLE9HMElWLEdBQ0hFLE1BQU1DLElBQ0wsRUFBWUEsRUFBSzJELE1BQU0sRUFBRyxHQzNJZnBFLGdCQUNRSSxNQUFNLHNHRDJJbEJpRSxNQUVSN0QsTUFBTThELElBQ0xoRCxFQUFvQixFQUFXZ0QsRUFBVSxJQUUxQ25ELE9BQU0sS0FDTEcsRUFBb0IsRUFBVyxHQUFHLEdBQ2xDLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL21vZHVsZXMvY291bnRyaWVzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvbW9kdWxlcy9ET01FbGVtZW50cy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL21vZHVsZXMvY29tbWVudHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL21vZHVsZXMvbGlrZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ291bnRyaWVzIEFQSVxyXG5jb25zdCBCQVNFX1VSTCA9ICdodHRwczovL3Jlc3Rjb3VudHJpZXMuY29tL3YzLjEnO1xyXG5cclxuLy8gR2V0IGxpc3Qgb2YgY291bnRyaWVzXHJcbmNvbnN0IGdldENvdW50cmllcyA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hbGxgKTtcclxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0Q291bnRyaWVzO1xyXG4iLCJjb25zdCBjb3VudHJ5TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb3VudHJ5LWxpc3QnKTtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XHJcbmV4cG9ydCB7IGNvdW50cnlMaXN0IH07XHJcbiIsImNvbnN0IEJBU0VfVVJMID0gJ2h0dHBzOi8vdXMtY2VudHJhbDEtaW52b2x2ZW1lbnQtYXBpLmNsb3VkZnVuY3Rpb25zLm5ldC9jYXBzdG9uZUFwaS8nO1xyXG5cclxuY29uc3Qgc2hvd0NvbW1lbnRzID0gYXN5bmMgKGlkKSA9PiB7XHJcbiAgY29uc3QgdXJsID0gYCR7QkFTRV9VUkx9YXBwcy9JZ1kwOGJ2Zk5MZHRSWWNTYWdxSS9jb21tZW50cz9pdGVtX2lkPSR7aWR9YDtcclxuICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJyB9O1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCByZXF1ZXN0T3B0aW9ucyk7XHJcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxufTtcclxuXHJcbmNvbnN0IGFkZENvbW1lbnQgPSBhc3luYyAoZGF0YSkgPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH1hcHBzL0lnWTA4YnZmTkxkdFJZY1NhZ3FJL2NvbW1lbnRzYCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHNob3dDb21tZW50cywgYWRkQ29tbWVudCB9OyIsIi8qIGVzbGludC1kaXNhYmxlIGltcGxpY2l0LWFycm93LWxpbmVicmVhayAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBhcnJheS1jYWxsYmFjay1yZXR1cm4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLWRhbmdsZSAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBhcnJvdy1ib2R5LXN0eWxlICovXHJcbmltcG9ydCBnZXRDb3VudHJpZXMgZnJvbSAnLi9tb2R1bGVzL2NvdW50cmllcy5qcyc7XHJcbmltcG9ydCB7IGNvdW50cnlMaXN0IH0gZnJvbSAnLi9tb2R1bGVzL0RPTUVsZW1lbnRzLmpzJztcclxuaW1wb3J0IHsgZ2V0TGlrZXMgfSBmcm9tICcuL21vZHVsZXMvbGlrZXMuanMnO1xyXG5pbXBvcnQgeyBzaG93Q29tbWVudHMsIGFkZENvbW1lbnQgfSBmcm9tICcuL21vZHVsZXMvY29tbWVudHMuanMnO1xyXG5cclxubGV0IGNvdW50cmllcyA9IFtdO1xyXG5cclxuY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaXRlbS1tb2RhbCcpO1xyXG5cclxuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2xvc2UnKVswXS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbn07XHJcblxyXG4vLyBHZXQgdGhlIHNwZWNpZmljIGNvdW50cnlcclxuY29uc3QgZmlsdGVyQ291bnRyaWVzID0gKGNvdW50cnlOYW1lLCBDb3VudHJ5QXJyYXkpID0+XHJcbiAgQ291bnRyeUFycmF5LmZpbmQoKGl0ZW0pID0+IGl0ZW0ubmFtZS5jb21tb24gPT09IGNvdW50cnlOYW1lLnRyaW0oKSk7XHJcblxyXG4vLyBEaXNwbGF5IHRoZSBsaXN0IG9mIGNvdW50cmllc1xyXG5jb25zdCBkaXNwbGF5Q291bnRyaWVzID0gYXN5bmMgKG5ld0xpc3QpID0+IHtcclxuICBjb3VudHJ5TGlzdC5pbm5lckhUTUwgPSBuZXdMaXN0XHJcbiAgICAubWFwKFxyXG4gICAgICAoY291bnRyeSkgPT4gYDxsaSBjbGFzcz1cImNvdW50cnktaXRlbVwiIGlkPSR7Y291bnRyeS5uYW1lLmNvbW1vbn0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY291bnRyeS1pbWdcIj5cclxuICAgICAgICA8aW1nIHNyYz1cIiR7Y291bnRyeS5mbGFncy5zdmd9XCIgYWx0PScke2NvdW50cnkubmFtZS5jb21tb259IGZsYWcnPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxyXG4gICAgICAgIDxwIGNsYXNzPVwiY291bnRyeS1uYW1lIG1iLTBcIj4ke2NvdW50cnkubmFtZS5jb21tb259PC9wPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsaWtlc1wiPlxyXG4gICAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6O1wiIHR5cGU9XCJidXR0b25cIiBjbGFzcz0nYWRkLWxpa2UnIGlkPSR7Y291bnRyeS5uYW1lLmNvbW1vbn0+XHJcbiAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJ3LTYgaC02XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTQuMzE4IDYuMzE4YTQuNSA0LjUgMCAwMDAgNi4zNjRMMTIgMjAuMzY0bDcuNjgyLTcuNjgyYTQuNSA0LjUgMCAwMC02LjM2NC02LjM2NEwxMiA3LjYzNmwtMS4zMTgtMS4zMThhNC41IDQuNSAwIDAwLTYuMzY0IDB6XCI+PC9wYXRoPjwvc3ZnPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJsaWtlcy1jb3VudGVyXCI+JHtjb3VudHJ5Lmxpa2VzQ291bnR9PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNvbW1lbnQtYnRuXCIgaWQ9XCIke2NvdW50cnkubmFtZS5jb21tb259XHJcblwiPkNvbW1lbnRzPC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9saT5gXHJcbiAgICApXHJcbiAgICAuam9pbignJyk7XHJcblxyXG4gIGNvbnN0IGNvdW50cnlFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvdW50cnktaXRlbScpO1xyXG4gIGNvdW50cnlFbGVtZW50LmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21tZW50LWJ0bicpKSB7XHJcbiAgICAgICAgY29uc3QgY291bnRyeU5hbWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XHJcbiAgICAgICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaXRlbS1tb2RhbCcpO1xyXG4gICAgICAgIG1vZGFsLnNldEF0dHJpYnV0ZSgnZGF0YS1pZCcsIGNvdW50cnlOYW1lKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBmaWx0ZXJDb3VudHJpZXMoY291bnRyeU5hbWUsIG5ld0xpc3QpO1xyXG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb3VudHJ5LWltZycpO1xyXG4gICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvdW50cnktdGl0bGUnKTtcclxuICAgICAgICBjb25zdCBwb3B1bGF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BvcHVsYXRpb24nKTtcclxuICAgICAgICBjb25zdCBzdWJSZWdpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3ViLXJlZ2lvbicpO1xyXG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHJlc3VsdC5mbGFncy5zdmcpO1xyXG4gICAgICAgIHRpdGxlLmlubmVySFRNTCA9IHJlc3VsdC5uYW1lLmNvbW1vbjtcclxuICAgICAgICBwb3B1bGF0aW9uLmlubmVySFRNTCA9IGBQb3B1bGF0aW9uOiAke3Jlc3VsdC5wb3B1bGF0aW9ufWA7XHJcbiAgICAgICAgc3ViUmVnaW9uLmlubmVySFRNTCA9IHJlc3VsdC5zdWJyZWdpb247XHJcblxyXG4gICAgICAgIC8vIGRpc3BsYXlpbmcgY29tbWVudHMgIFxyXG4gICAgICAgIGdldENvbW1lbnRMaXN0KHJlc3VsdC5uYW1lLmNvbW1vbik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0Q29tbWVudExpc3QgPSBhc3luYyAoaWQpID0+IHtcclxuICBjb25zdCB1bENvbW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbW1lbnQtbGlzdCcpO1xyXG4gIGlmIChpZCkge1xyXG4gICAgYXdhaXQgc2hvd0NvbW1lbnRzKGlkKVxyXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGxpc3QgPSBkYXRhLm1hcCgoY29tbWVudCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGA8bGk+XHJcbiAgICAgICAgICAgIDxzcGFuPiR7Y29tbWVudC5jcmVhdGlvbl9kYXRlfTwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4+JHtjb21tZW50LnVzZXJuYW1lfTwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4+JHtjb21tZW50LmNvbW1lbnR9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xpPmA7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHVsQ29tbWVudHMuaW5uZXJIVE1MID0gIGxpc3Quam9pbignJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IEVycm9yKCdObyBjb21tZW50cycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICB1bENvbW1lbnRzLmlubmVySFRNTCA9IGVyci5tZXNzYWdlO1xyXG4gICAgICB9KVxyXG4gIH1cclxufTtcclxuXHJcbi8vIGNyZWF0ZSBvYmogZm9yIGVhY2ggY291bnRyeSB0byBpbmNsdWRlIGxpa2VzQ291bnRcclxuY29uc3QgY3JlYXRlTmV3Q291bnRyeU9iaiA9IChjb3VudHJpZXMsIGxpa2VzID0gW10pID0+IHtcclxuICBpZiAoY291bnRyaWVzLmxlbmd0aCkge1xyXG4gICAgY29uc3QgbmV3TGlzdCA9IGNvdW50cmllcy5tYXAoKGNvdW50cnkpID0+IHtcclxuICAgICAgY29uc3QgbGlrZXNObyA9IGxpa2VzLmZpbmQoKGxpa2UpID0+IHtcclxuICAgICAgICBpZiAobGlrZS5pdGVtX2lkID09PSBjb3VudHJ5Lm5hbWUuY29tbW9uKSB7XHJcbiAgICAgICAgICByZXR1cm4gbGlrZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLmNvdW50cnksXHJcbiAgICAgICAgbGlrZXNDb3VudDogbGlrZXNObyA/IGxpa2VzTm8ubGlrZXMgOiAwLFxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgbmV3TGlzdC5sZW5ndGggJiYgZGlzcGxheUNvdW50cmllcyhuZXdMaXN0KTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBhZGQgY29tbWVudFxyXG5jb25zdCBjcmVhdGVDb21tZW50ID0gKCkgPT4ge1xyXG4gIGNvbnN0IHN1Ym1pdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtY29tbWVudCcpO1xyXG4gc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICBjb25zdCBpZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpdGVtLW1vZGFsJykuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XHJcbiAgIGNvbnN0IGNvbW1lbnRJRCA9IGlkLnRyaW0oKTtcclxuICAgbGV0IHVzZXJuYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKS52YWx1ZTtcclxuICAgbGV0IGNvbW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5zaWdodHMnKS52YWx1ZTtcclxuICAgY29uc3QgY29tbWVudE9iaiA9IHtcclxuICAgIGl0ZW1faWQ6IGNvbW1lbnRJRCxcclxuICAgIHVzZXJuYW1lLFxyXG4gICAgY29tbWVudFxyXG4gICB9O1xyXG4gICBpZiAodXNlcm5hbWUgIT09ICcnICYmIGNvbW1lbnQgIT09ICcnKSB7XHJcbiAgICBhZGRDb21tZW50KGNvbW1lbnRPYmopLnRoZW4ocmVzID0+IHtcclxuICAgICAgZ2V0Q29tbWVudExpc3QoY29tbWVudElEKTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKS52YWx1ZSA9ICcnO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5zaWdodHMnKS52YWx1ZSA9ICcnO1xyXG4gICAgfSlcclxuICAgfVxyXG4gfSk7XHJcbn1cclxuXHJcbmNyZWF0ZUNvbW1lbnQoKTtcclxuXHJcbmNvbnN0IGZldGNoQWxsQ291bnRyaWVzID0gYXN5bmMgKCkgPT4ge1xyXG4gIGF3YWl0IGdldENvdW50cmllcygpXHJcbiAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICBjb3VudHJpZXMgPSBkYXRhLnNsaWNlKDAsIDYpO1xyXG4gICAgICByZXR1cm4gZ2V0TGlrZXMoKTtcclxuICAgIH0pXHJcbiAgICAudGhlbigocmVzcG9uc2UxKSA9PiB7XHJcbiAgICAgIGNyZWF0ZU5ld0NvdW50cnlPYmooY291bnRyaWVzLCByZXNwb25zZTEpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgIGNyZWF0ZU5ld0NvdW50cnlPYmooY291bnRyaWVzLCBbXSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmZXRjaEFsbENvdW50cmllcyk7XHJcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvcGVyYXRvci1saW5lYnJlYWtcclxuY29uc3QgSU5WVk9MVkVEX1VSTCA9XHJcbiAgJ2h0dHBzOi8vdXMtY2VudHJhbDEtaW52b2x2ZW1lbnQtYXBpLmNsb3VkZnVuY3Rpb25zLm5ldC9jYXBzdG9uZUFwaSc7XHJcblxyXG5jb25zdCBBUFBfSUQgPSAnWHd6aHk3aElDcUpWZG5BdEpHRXMnO1xyXG5cclxuLy8gR2V0IGFsbCBMaWtlcyAtLS0tLT4gIC9hcHBzLzphcHBfaWQvbGlrZXMvXHJcbmNvbnN0IGdldExpa2VzID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7SU5WVk9MVkVEX1VSTH0vYXBwcy8ke0FQUF9JRH0vbGlrZXNgKTtcclxuICByZXR1cm4gcmVzcG9uc2U7XHJcbn07XHJcblxyXG5leHBvcnQgeyBJTlZWT0xWRURfVVJMLCBBUFBfSUQsIGdldExpa2VzIH07XHJcbiJdLCJuYW1lcyI6WyJjb3VudHJ5TGlzdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm1vZGFsIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm9uY2xpY2siLCJzdHlsZSIsImRpc3BsYXkiLCJnZXRDb21tZW50TGlzdCIsImFzeW5jIiwiaWQiLCJ1bENvbW1lbnRzIiwidXJsIiwiZmV0Y2giLCJtZXRob2QiLCJqc29uIiwic2hvd0NvbW1lbnRzIiwidGhlbiIsImRhdGEiLCJsZW5ndGgiLCJFcnJvciIsImxpc3QiLCJtYXAiLCJjb21tZW50IiwiY3JlYXRpb25fZGF0ZSIsInVzZXJuYW1lIiwiaW5uZXJIVE1MIiwiam9pbiIsImNhdGNoIiwiZXJyIiwibWVzc2FnZSIsImNyZWF0ZU5ld0NvdW50cnlPYmoiLCJjb3VudHJpZXMiLCJsaWtlcyIsIm5ld0xpc3QiLCJjb3VudHJ5IiwibGlrZXNObyIsImZpbmQiLCJsaWtlIiwiaXRlbV9pZCIsIm5hbWUiLCJjb21tb24iLCJsaWtlc0NvdW50IiwiZmxhZ3MiLCJzdmciLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiY291bnRyeU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZXN1bHQiLCJDb3VudHJ5QXJyYXkiLCJpdGVtIiwidHJpbSIsImZpbHRlckNvdW50cmllcyIsImltZyIsInRpdGxlIiwicG9wdWxhdGlvbiIsInN1YlJlZ2lvbiIsInN1YnJlZ2lvbiIsImRpc3BsYXlDb3VudHJpZXMiLCJjb21tZW50SUQiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidGV4dCIsImFkZENvbW1lbnQiLCJyZXMiLCJzbGljZSIsImdldExpa2VzIiwicmVzcG9uc2UxIl0sInNvdXJjZVJvb3QiOiIifQ==