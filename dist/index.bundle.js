"use strict";(self.webpackChunkwebpack_template=self.webpackChunkwebpack_template||[]).push([[826],{507:()=>{const t=document.querySelector(".country-list"),e="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/",n="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi",o="IgY08bvfNLdtRYcSagqI";let a=[];const s=document.querySelector("#item-modal");document.getElementsByClassName("close")[0].onclick=()=>{s.style.display="none"};const c=async t=>{const n=document.querySelector(".comment-list");t&&await(async t=>{const n=`${e}apps/IgY08bvfNLdtRYcSagqI/comments?item_id=${t}`;return(await fetch(n,{method:"GET"})).json()})(t).then((t=>{if(!(t.length>0))throw Error("No comments");{const e=t.map((t=>`<li>\n            <span>${t.creation_date}</span>\n            <span>${t.username}</span>\n            <span>${t.comment}</span>\n            </li>`));n.innerHTML=e.join(""),s.style.display="block",(()=>{const t=document.querySelector(".comment-list");document.querySelector(".commentsCounter").textContent=t.children.length})()}})).catch((t=>{n.innerHTML=t.message}))},i=(e,a=[])=>{if(e.length){const s=e.map((t=>{const e=a.find((e=>{if(e.item_id===t.name.common.split(" ")[0])return e}));return{...t,likesCount:e?e.likes:0}}));s.length&&(async e=>{t.innerHTML=e.map((t=>{const e=t.name.common.split(" ")[0];return`<li class="country-item" data-id=${t.name.common}>\n        <div class="card">\n          <div class="country-img">\n            <img src="${t.flags.svg}" alt='${t.name.common} flag'>\n          </div>\n          <div class="card-body">\n            <p class="country-name mb-0">${t.name.common}</p>\n            <div class="likes">\n              <a href="javascript:;" type="button" class='add-like' id=${e}>\n                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>\n              </a>\n              <span class="likes-counter">${t.likesCount}</span>\n            </div>\n          </div>\n          <div class="actions">\n            <button type="button" class="comment-btn" id="${t.name.common}\n    ">Comments</button>\n          </div>\n        </div>\n      </li>`})).join(""),document.querySelectorAll(".country-item").forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("comment-btn")){const n=t.target.getAttribute("id");document.querySelector("#item-modal").setAttribute("data-id",n);const o=((t,e)=>e.find((e=>e.name.common===t.trim())))(n,e),a=document.querySelector("#country-img"),s=document.querySelector("#country-title"),i=document.querySelector("#population"),m=document.querySelector("#sub-region");a.setAttribute("src",o.flags.svg),s.innerHTML=o.name.common,i.innerHTML=`Population: ${o.population}`,m.innerHTML=o.subregion,c(o.name.common)}t.target.parentElement.classList.contains("add-like")&&(async t=>(await fetch(`${n}/apps/${o}/likes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({item_id:t})})).text())(t.target.parentElement.getAttribute("id")).then((()=>{const e=Number(t.target.parentElement.nextElementSibling.textContent);t.target.parentElement.nextElementSibling.textContent=String(e+1)}))}))}))})(s)}};document.querySelector("#add-comment").addEventListener("click",(()=>{const t=document.getElementById("item-modal").getAttribute("data-id").trim(),n=document.getElementById("name").value,o=document.getElementById("insights").value;""!==n&&""!==o&&(async t=>(await fetch(`${e}apps/IgY08bvfNLdtRYcSagqI/comments`,{method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify(t)})).text())({item_id:t,username:n,comment:o}).then((()=>{c(t),document.getElementById("name").value="",document.getElementById("insights").value=""}))})),document.addEventListener("DOMContentLoaded",(async()=>{await(async()=>(await fetch("https://restcountries.com/v3.1/all")).json())().then((t=>(a=t.slice(0,6),(async()=>await fetch(`${n}/apps/${o}/likes`))()))).then((t=>{t.json().then((t=>{i(a,t)})).catch((()=>{i(a,[])}))}))}))}},t=>{t(t.s=507)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,