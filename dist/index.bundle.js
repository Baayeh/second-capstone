"use strict";(self.webpackChunkwebpack_template=self.webpackChunkwebpack_template||[]).push([[826],{864:()=>{const t="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi",e="14KqRvCZ5CTRdsGLguWF",n=document.querySelector(".country-list");let a=[];const s=()=>{const t=document.querySelector(".list-group"),e=document.querySelector(".commentsCounter");t.children.length>0?e.innerHTML=t.children.length:e.innerHTML="0"},o=async n=>{const a=document.querySelector(".list-group");n&&await(async n=>{const a=`${t}/apps/${e}/comments?item_id=${n}`;return(await fetch(a,{method:"GET"})).json()})(n).then((t=>{if(!(t.length>0))throw Error("No comments");{const e=t.map((t=>`<li class="list-group-item d-flex justify-content-between align-items-center">\n              <span>${t.creation_date}</span>\n              <span>${t.username}</span>\n              <span>${t.comment}</span>\n            </li>`));a.innerHTML=e.join(""),s()}})).catch((t=>{const e=`<li class="list-group-item d-flex justify-content-center">${t.message}</li>`;a.innerHTML=e}))};(()=>{const t=document.createElement("section");t.innerHTML='<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">\n  <div class="modal-dialog modal-dialog-scrollable">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n      </div>\n      <div class="modal-body">\n        <section class="text-center">\n          <img id="country-img" src="" alt="modal image">\n          <section>\n            <h3 id="country-title" class="mt-2"></h3>\n            <p class="card-text mb-2">\n              <span class="p-lead">Population: </span> \n              <span class="modal-population"></span>\n            </p>\n            <p class="card-text mb-2">\n              <span class="p-lead">Official Name: </span> \n              <span class="official"></span>\n            </p>\n          </section>\n        </section>\n        <section class="comment-section">\n          <h4 class="d-flex align-items-center gap-2 justify-content-center"><span class="commentsCounter badge bg-secondary rounded-pill"></span><span>Comments</span></h4>\n          <ul class="list-group mt-4"></ul>\n        </section>\n\n        <section class="mt-5">\n          <form>\n            <input type="text" id="name" class="form-control" placeholder="Your name" aria-label="Full Name">\n            <textarea id="insights" type="text" class="form-control" placeholder="Remarks" aria-label="Remarks"></textarea>\n            <button type="button" id=\'add-comment\' class="btn btn-success">Comment</button>\n          </form>\n        </section>\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>\n      </div>\n    </div>\n  </div>\n</div>',document.querySelector("body").appendChild(t)})();const l=(a,l=[])=>{if(a.length){const c=a.map((t=>{const e=l.find((e=>{if(e.item_id===t.name.common.split(" ")[0])return e}));return{...t,likesCount:e?e.likes:0}}));c.length&&(async a=>{let l="";a.forEach((t=>{const e=t.name.common.split(" ")[0],n=`<div class="col-12 col-sm-6 col-lg-3" data-id=${t.name.common}>\n    <div class="card mx-auto" data-id=${t.name.common}>\n      <div class="card-img" style="background-image: url(${t.flags.svg})"></div>\n      <div class="card-body">\n        <div class="c-header d-flex justify-content-between align-items-center mb-2">\n          <h4 class="card-title mb-0">${t.name.common}</h4>\n          <div class="likes">\n            <a href="javascript:;" type="button" class='add-like' id=${e}>\n              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>\n            </a>\n            <span class="likes-counter">${t.likesCount}</span>\n          </div>\n        </div>\n        <p class="card-text small mb-2">\n          <span class="p-lead">Population: </span>\n          <span class="population">${t.population.toLocaleString("en-US")}</span>\n        </p>\n        <p class="card-text small mb-2">\n          <span class="p-lead">Region: </span> \n          <span class="region">${t.region}</span>\n        </p>\n        <p class="card-text small mb-2">\n          <span class="p-lead">Capital: </span> \n          <span class="capital">${t.capital}</span>\n        </p>\n        <button type="button" class="btn btn-outline-secondary comment-btn" data-bs-toggle="modal" data-bs-target="#exampleModal" id="${t.name.common}">See Details</button>\n      </div>\n    </div>\n  </div>`;l+=n})),n.innerHTML=l,document.querySelector("#country-counter").textContent=n.children.length,document.querySelectorAll(".card").forEach((n=>{n.addEventListener("click",(n=>{if(n.target.classList.contains("comment-btn")){s();const t=n.target.getAttribute("id");document.querySelector(".modal").setAttribute("data-id",t);const e=((t,e)=>e.find((e=>e.name.common===t.trim())))(t,a),l=document.querySelector("#country-img"),c=document.querySelector("#country-title"),i=document.querySelector(".modal-population"),d=document.querySelector(".official");l.setAttribute("src",e.flags.svg),c.innerHTML=e.name.common,i.innerHTML=e.population.toLocaleString("en-US"),d.innerHTML=e.name.official,o(e.name.common)}n.target.parentNode.parentNode.classList.contains("add-like")&&(async n=>(await fetch(`${t}/apps/${e}/likes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({item_id:n})})).text())(n.target.parentNode.parentNode.getAttribute("id")).then((()=>{const t=Number(n.target.parentNode.parentNode.nextElementSibling.textContent);n.target.parentNode.parentNode.nextElementSibling.textContent=String(t+1)}))}))}))})(c)}};document.querySelector("#add-comment").addEventListener("click",(()=>{const n=document.getElementById("exampleModal").getAttribute("data-id").trim(),a=document.getElementById("name").value,s=document.getElementById("insights").value;""!==a&&""!==s&&(async n=>(await fetch(`${t}/apps/${e}/comments`,{method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify(n)})).text())({item_id:n,username:a,comment:s}).then((()=>{o(n),document.getElementById("name").value="",document.getElementById("insights").value=""}))})),document.addEventListener("DOMContentLoaded",(async()=>{await(async()=>(await fetch("https://restcountries.com/v3.1/all")).json())().then((n=>(a=n.slice(0,8),(async()=>await fetch(`${t}/apps/${e}/likes`))()))).then((t=>{t.json().then((t=>{l(a,t)})).catch((()=>{l(a,[])}))}))}))}},t=>{t(t.s=864)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,