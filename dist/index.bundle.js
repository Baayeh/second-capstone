"use strict";(self.webpackChunkwebpack_template=self.webpackChunkwebpack_template||[]).push([[826],{289:()=>{const t=class{static getCountries=async()=>(await fetch("https://restcountries.com/v3.1/all")).json()},e=document.querySelector(".country-list"),n=document.querySelector("#item-modal");document.getElementsByClassName("close")[0].onclick=()=>{n.style.display="none"},console.log((async t=>{const e=await fetch("https://restcountries.com/v3.1/apps/IgY08bvfNLdtRYcSagqI/comments?item_id=item1",{method:"GET"});if(e.ok)return await e.json()})()),document.addEventListener("DOMContentLoaded",(async()=>{const o=(await t.getCountries()).slice(0,6);e.innerHTML=o.map((t=>`<li class="country-item">\n    <div class="card">\n      <div class="country-img">\n        <img src="${t.flags.svg}" alt="Ugandan Flag">\n      </div>\n      <div class="card-body">\n        <p class="country-name mb-0">${t.name.common}</p>\n        <div class="likes">\n          <a href="" type="button">\n            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>\n          </a>\n          <span class="likes-counter">5 likes</span>\n        </div>\n      </div>\n      <div class="actions">\n        <button type="button" class="comment-btn" id="${t.name.common}\n">Comments</button>\n      </div>\n    </div>\n  </li>`)).join(""),document.querySelectorAll(".country-item").forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("comment-btn")){const e=((t,e)=>e.find((e=>e.name[".common"]===t.trim())))(t.target.getAttribute("id"),o);n.style.display="block";const s=document.querySelector("#country-img"),c=document.querySelector("#country-title"),a=document.querySelector("#population"),i=document.querySelector("#sub-region");s.setAttribute("src",e.flags.svg),c.innerHTML=e.name.common,a.innerHTML=`Population: ${e.population}`,i.innerHTML=e.subregion}}))}))})())}},t=>{t(t.s=289)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI2R0FTQSxRQVBBLE1BQ0VBLG9CQUFzQkMsZ0JBQ0dDLE1BQU0sdUNBQ2JDLFFDSHBCLEVBRm9CQyxTQUFTQyxjQUFjLGlCQ09yQ0MsRUFBUUYsU0FBU0MsY0FBYyxlQUVyQ0QsU0FBU0csdUJBQXVCLFNBQVMsR0FBR0MsUUFBVSxLQUNwREYsRUFBTUcsTUFBTUMsUUFBVSxNQUFNLEVBdUQ1QkMsUUFBUUMsSUMvRFdYLE9BQU9ZLElBQ3hCLE1BRU1DLFFBQWlCWixNQUZYLGtGQUNXLENBQUNhLE9BQVEsUUFFaEMsR0FBSUQsRUFBU0UsR0FDVCxhQUFhRixFQUFTWCxNQUMxQixFRHlEVWMsSUFLZGIsU0FBU2MsaUJBQWlCLG1CQXJERGpCLFdBQ3ZCLE1BQ01rQixTQURrQixrQkFDT0MsTUFBTSxFQUFHLEdBQ3hDLFlBQXdCRCxFQUNyQkUsS0FDRUMsR0FBWSx5R0FHQ0EsRUFBUUMsTUFBTUMsK0dBR0tGLEVBQVFHLEtBQUtDLHVsQkFTSUosRUFBUUcsS0FBS0MsbUVBTWhFQyxLQUFLLElBRWV2QixTQUFTd0IsaUJBQWlCLGlCQUNsQ0MsU0FBU0MsSUFDdEJBLEVBQVFaLGlCQUFpQixTQUFVYSxJQUNqQyxHQUFJQSxFQUFFQyxPQUFPQyxVQUFVQyxTQUFTLGVBQWdCLENBQzlDLE1BQ01DLEVBcENVLEVBQUNDLEVBQWFqQixJQUFpQkEsRUFBYWtCLE1BQU1DLEdBQVNBLEVBQUtiLEtBQUssYUFBZVcsRUFBWUcsU0FvQ2pHQyxDQURLVCxFQUFFQyxPQUFPUyxhQUFhLE1BQ0V0QixHQUM1Q2IsRUFBTUcsTUFBTUMsUUFBVSxRQUN0QixNQUFNZ0MsRUFBTXRDLFNBQVNDLGNBQWMsZ0JBQzdCc0MsRUFBUXZDLFNBQVNDLGNBQWMsa0JBQy9CdUMsRUFBYXhDLFNBQVNDLGNBQWMsZUFDcEN3QyxFQUFZekMsU0FBU0MsY0FBYyxlQUN6Q3FDLEVBQUlJLGFBQWEsTUFBT1gsRUFBT1osTUFBTUMsS0FDckNtQixFQUFNSSxVQUFZWixFQUFPVixLQUFLQyxPQUM5QmtCLEVBQVdHLFVBQVksZUFBZVosRUFBT1MsYUFDN0NDLEVBQVVFLFVBQVlaLEVBQU9hLFNBQy9CLElBQ0EsR0FDRixFQVEwQ0MsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvbW9kdWxlcy9BUEkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9tb2R1bGVzL0RPTUVsZW1lbnRzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9tb2R1bGVzL2NvbW1lbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJBU0VfVVJMID0gJ2h0dHBzOi8vcmVzdGNvdW50cmllcy5jb20vdjMuMSc7XHJcblxyXG5jbGFzcyBBUEkge1xyXG4gIHN0YXRpYyBnZXRDb3VudHJpZXMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hbGxgKTtcclxuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQVBJO1xyXG4iLCJjb25zdCBjb3VudHJ5TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb3VudHJ5LWxpc3QnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvdW50cnlMaXN0O1xyXG4iLCJpbXBvcnQgQVBJIGZyb20gJy4vbW9kdWxlcy9BUEkuanMnO1xyXG5pbXBvcnQgY291bnRyeUxpc3QgZnJvbSAnLi9tb2R1bGVzL0RPTUVsZW1lbnRzLmpzJztcclxuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XHJcbmltcG9ydCB7XHJcbiAgc2hvd0NvbW1lbnRzXHJcbn0gZnJvbSAnLi9tb2R1bGVzL2NvbW1lbnRzLmpzJ1xyXG5cclxuY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaXRlbS1tb2RhbCcpO1xyXG5cclxuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2xvc2UnKVswXS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbn07XHJcblxyXG4vLyBHZXQgdGhlIHNwZWNpZmljIGNvdW50cnlcclxuY29uc3QgZmlsdGVyQ291bnRyaWVzID0gKGNvdW50cnlOYW1lLCBzaXhDb3VudHJpZXMpID0+IHNpeENvdW50cmllcy5maW5kKChpdGVtKSA9PiBpdGVtLm5hbWVbJy5jb21tb24nXSA9PT0gY291bnRyeU5hbWUudHJpbSgpKTtcclxuXHJcbi8vIERpc3BsYXkgdGhlIGxpc3Qgb2YgY291bnRyaWVzXHJcbmNvbnN0IGRpc3BsYXlDb3VudHJpZXMgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgY291bnRyaWVzID0gYXdhaXQgQVBJLmdldENvdW50cmllcygpO1xyXG4gIGNvbnN0IHNpeENvdW50cmllcyA9IGNvdW50cmllcy5zbGljZSgwLCA2KTtcclxuICBjb3VudHJ5TGlzdC5pbm5lckhUTUwgPSBzaXhDb3VudHJpZXNcclxuICAgIC5tYXAoXHJcbiAgICAgIChjb3VudHJ5KSA9PiBgPGxpIGNsYXNzPVwiY291bnRyeS1pdGVtXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY291bnRyeS1pbWdcIj5cclxuICAgICAgICA8aW1nIHNyYz1cIiR7Y291bnRyeS5mbGFncy5zdmd9XCIgYWx0PVwiVWdhbmRhbiBGbGFnXCI+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgPHAgY2xhc3M9XCJjb3VudHJ5LW5hbWUgbWItMFwiPiR7Y291bnRyeS5uYW1lLmNvbW1vbn08L3A+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImxpa2VzXCI+XHJcbiAgICAgICAgICA8YSBocmVmPVwiXCIgdHlwZT1cImJ1dHRvblwiPlxyXG4gICAgICAgICAgICA8c3ZnIGNsYXNzPVwidy02IGgtNlwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk00LjMxOCA2LjMxOGE0LjUgNC41IDAgMDAwIDYuMzY0TDEyIDIwLjM2NGw3LjY4Mi03LjY4MmE0LjUgNC41IDAgMDAtNi4zNjQtNi4zNjRMMTIgNy42MzZsLTEuMzE4LTEuMzE4YTQuNSA0LjUgMCAwMC02LjM2NCAwelwiPjwvcGF0aD48L3N2Zz5cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGlrZXMtY291bnRlclwiPjUgbGlrZXM8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9uc1wiPlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY29tbWVudC1idG5cIiBpZD1cIiR7Y291bnRyeS5uYW1lLmNvbW1vbn1cclxuXCI+Q29tbWVudHM8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2xpPmAsXHJcbiAgICApXHJcbiAgICAuam9pbignJyk7XHJcblxyXG4gIGNvbnN0IGNvdW50cnlFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvdW50cnktaXRlbScpO1xyXG4gIGNvdW50cnlFbGVtZW50LmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21tZW50LWJ0bicpKSB7XHJcbiAgICAgICAgY29uc3QgY291bnRyeU5hbWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZmlsdGVyQ291bnRyaWVzKGNvdW50cnlOYW1lLCBzaXhDb3VudHJpZXMpO1xyXG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb3VudHJ5LWltZycpO1xyXG4gICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvdW50cnktdGl0bGUnKTtcclxuICAgICAgICBjb25zdCBwb3B1bGF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BvcHVsYXRpb24nKTtcclxuICAgICAgICBjb25zdCBzdWJSZWdpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3ViLXJlZ2lvbicpO1xyXG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHJlc3VsdC5mbGFncy5zdmcpO1xyXG4gICAgICAgIHRpdGxlLmlubmVySFRNTCA9IHJlc3VsdC5uYW1lLmNvbW1vbjtcclxuICAgICAgICBwb3B1bGF0aW9uLmlubmVySFRNTCA9IGBQb3B1bGF0aW9uOiAke3Jlc3VsdC5wb3B1bGF0aW9ufWA7XHJcbiAgICAgICAgc3ViUmVnaW9uLmlubmVySFRNTCA9IHJlc3VsdC5zdWJyZWdpb247XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG5jb25zdCBjb21tZW50TGlzdCA9ICgpID0+IHtcclxuICBjb25zb2xlLmxvZyhzaG93Q29tbWVudHMoJ2l0ZW0xJykpO1xyXG59XHJcbmNvbW1lbnRMaXN0KClcclxuXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZGlzcGxheUNvdW50cmllcygpKTtcclxuIiwiY29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly9yZXN0Y291bnRyaWVzLmNvbS92My4xLyc7XHJcblxyXG5jb25zdCBzaG93Q29tbWVudHMgPSBhc3luYyAoaWQpID0+IHtcclxuICAgIGNvbnN0IHVybCA9IGAke0JBU0VfVVJMfWFwcHMvSWdZMDhidmZOTGR0UlljU2FncUkvY29tbWVudHM/aXRlbV9pZD0ke2lkfWA7XHJcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHttZXRob2Q6ICdHRVQnIH07XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgcmVxdWVzdE9wdGlvbnMpO1xyXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIHNob3dDb21tZW50c1xyXG59Il0sIm5hbWVzIjpbInN0YXRpYyIsImFzeW5jIiwiZmV0Y2giLCJqc29uIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibW9kYWwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwib25jbGljayIsInN0eWxlIiwiZGlzcGxheSIsImNvbnNvbGUiLCJsb2ciLCJpZCIsInJlc3BvbnNlIiwibWV0aG9kIiwib2siLCJzaG93Q29tbWVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwic2l4Q291bnRyaWVzIiwic2xpY2UiLCJtYXAiLCJjb3VudHJ5IiwiZmxhZ3MiLCJzdmciLCJuYW1lIiwiY29tbW9uIiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZWxlbWVudCIsImUiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlc3VsdCIsImNvdW50cnlOYW1lIiwiZmluZCIsIml0ZW0iLCJ0cmltIiwiZmlsdGVyQ291bnRyaWVzIiwiZ2V0QXR0cmlidXRlIiwiaW1nIiwidGl0bGUiLCJwb3B1bGF0aW9uIiwic3ViUmVnaW9uIiwic2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwic3VicmVnaW9uIiwiZGlzcGxheUNvdW50cmllcyJdLCJzb3VyY2VSb290IjoiIn0=