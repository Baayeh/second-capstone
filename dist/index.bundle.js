"use strict";(self.webpackChunkwebpack_template=self.webpackChunkwebpack_template||[]).push([[826],{510:()=>{const t=document.querySelector(".country-list"),n="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi",e="IgY08bvfNLdtRYcSagqI";let o=[];const s=document.querySelector("#item-modal");document.getElementsByClassName("close")[0].onclick=()=>{s.style.display="none"};const a=async o=>{t.innerHTML=o.map((t=>{const n=t.name.common.split(" ")[0];return`<li class="country-item" data-id=${t.name.common}>\n        <div class="card">\n          <div class="country-img">\n            <img src="${t.flags.svg}" alt='${t.name.common} flag'>\n          </div>\n          <div class="card-body">\n            <p class="country-name mb-0">${t.name.common}</p>\n            <div class="likes">\n              <a href="javascript:;" type="button" class='add-like' id=${n}>\n                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>\n              </a>\n              <span class="likes-counter">${t.likesCount}</span>\n            </div>\n          </div>\n          <div class="actions">\n            <button type="button" class="comment-btn" id="${t.name.common}\n    ">Comments</button>\n          </div>\n        </div>\n      </li>`})).join(""),document.querySelector("#country-counter").textContent=t.children.length,document.querySelectorAll(".country-item").forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("comment-btn")){const n=(a=t.target.getAttribute("id"),o.find((t=>t.name.common===a.trim())));s.style.display="block";const e=document.querySelector("#country-img"),c=document.querySelector("#country-title"),i=document.querySelector("#population"),l=document.querySelector("#sub-region");e.setAttribute("src",n.flags.svg),c.innerHTML=n.name.common,i.innerHTML=`Population: ${n.population}`,l.innerHTML=n.subregion;const r=document.querySelector(".comment-list");(async t=>{t===n.name.common&&await(async t=>{const n=`https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/IgY08bvfNLdtRYcSagqI/comments?item_id=${t}`;return(await fetch(n,{method:"GET"})).json()})(t).then((t=>{if(!(t.length>0))throw Error("No comments added!!");{const n=t.map((t=>`<li>\n                      <span>${t.creation_date}</span>\n                      <span>${t.username}</span>\n                      <span>${t.comment}</span>\n                      </li>`));r.innerHTML=n.join("")}})).catch((t=>{r.innerHTML=t.message}))})(n.name.common)}var a;t.target.parentElement.classList.contains("add-like")&&(async t=>(await fetch(`${n}/apps/${e}/likes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({item_id:t})})).text())(t.target.parentElement.getAttribute("id")).then((()=>{const n=Number(t.target.parentElement.nextElementSibling.textContent);t.target.parentElement.nextElementSibling.textContent=String(n+1)}))}))}))},c=(t,n=[])=>{if(t.length){const e=t.map((t=>{const e=n.find((n=>{if(n.item_id===t.name.common.split(" ")[0])return n}));return{...t,likesCount:e?e.likes:0}}));e.length&&a(e)}};document.addEventListener("DOMContentLoaded",(async()=>{await(async()=>(await fetch("https://restcountries.com/v3.1/all")).json())().then((t=>(o=t.slice(0,6),(async()=>await fetch(`${n}/apps/${e}/likes`))()))).then((t=>{t.json().then((t=>{c(o,t)})).catch((()=>{c(o,[])}))}))}))}},t=>{t(t.s=510)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,